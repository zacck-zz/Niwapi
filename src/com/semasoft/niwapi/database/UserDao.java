package com.semasoft.niwapi.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.semasoft.niwapi.database.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, Integer.class, "user_id", false, "USER_ID");
        public final static Property Fb_token = new Property(1, String.class, "fb_token", false, "FB_TOKEN");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property User_phrase = new Property(3, String.class, "user_phrase", false, "USER_PHRASE");
        public final static Property User_mail = new Property(4, String.class, "user_mail", false, "USER_MAIL");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'USER_ID' INTEGER," + // 0: user_id
                "'FB_TOKEN' TEXT," + // 1: fb_token
                "'USER_NAME' TEXT," + // 2: user_name
                "'USER_PHRASE' TEXT," + // 3: user_phrase
                "'USER_MAIL' TEXT);"); // 4: user_mail
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        String fb_token = entity.getFb_token();
        if (fb_token != null) {
            stmt.bindString(2, fb_token);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String user_phrase = entity.getUser_phrase();
        if (user_phrase != null) {
            stmt.bindString(4, user_phrase);
        }
 
        String user_mail = entity.getUser_mail();
        if (user_mail != null) {
            stmt.bindString(5, user_mail);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fb_token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_phrase
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // user_mail
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setFb_token(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_phrase(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_mail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(User entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

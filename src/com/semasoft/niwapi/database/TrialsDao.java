package com.semasoft.niwapi.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.semasoft.niwapi.database.Trials;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRIALS.
*/
public class TrialsDao extends AbstractDao<Trials, Void> {

    public static final String TABLENAME = "TRIALS";

    /**
     * Properties of entity Trials.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, Integer.class, "user_id", false, "USER_ID");
        public final static Property Trials_id = new Property(1, Integer.class, "trials_id", false, "TRIALS_ID");
        public final static Property User_attempt = new Property(2, String.class, "user_attempt", false, "USER_ATTEMPT");
        public final static Property Contest_id = new Property(3, Integer.class, "contest_id", false, "CONTEST_ID");
        public final static Property Trial_time = new Property(4, java.util.Date.class, "trial_time", false, "TRIAL_TIME");
    };


    public TrialsDao(DaoConfig config) {
        super(config);
    }
    
    public TrialsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRIALS' (" + //
                "'USER_ID' INTEGER," + // 0: user_id
                "'TRIALS_ID' INTEGER," + // 1: trials_id
                "'USER_ATTEMPT' TEXT," + // 2: user_attempt
                "'CONTEST_ID' INTEGER," + // 3: contest_id
                "'TRIAL_TIME' INTEGER);"); // 4: trial_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRIALS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Trials entity) {
        stmt.clearBindings();
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        Integer trials_id = entity.getTrials_id();
        if (trials_id != null) {
            stmt.bindLong(2, trials_id);
        }
 
        String user_attempt = entity.getUser_attempt();
        if (user_attempt != null) {
            stmt.bindString(3, user_attempt);
        }
 
        Integer contest_id = entity.getContest_id();
        if (contest_id != null) {
            stmt.bindLong(4, contest_id);
        }
 
        java.util.Date trial_time = entity.getTrial_time();
        if (trial_time != null) {
            stmt.bindLong(5, trial_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Trials readEntity(Cursor cursor, int offset) {
        Trials entity = new Trials( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // trials_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_attempt
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // contest_id
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // trial_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Trials entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTrials_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUser_attempt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContest_id(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTrial_time(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Trials entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Trials entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
